services:
  client:
    image: sql-distributed-transactions-client:latest
    networks:
      - net
    environment:
      SERVER_URL: http://server:40690
      DUMMY_HOST: dummy:40691
      CLIENT_TO_SEND: 1_000_000
      CLIENT_WORKER_COUNT: 2

  dummy:
    image: sql-distributed-transactions-dummy:latest
    networks:
      - net
    environment:
      DUMMY_TO_RECEIVE: 1_000_000

  server:
    image: sql-distributed-transactions-server:latest
    networks:
      - net
    environment:
      COORDINATOR_DB_URL: postgres://postgres:postgres@coordinator-db:5432/coordinator
      SERVER_EXECUTOR_TRANSACTION_INTERVAL: 5s
      SERVER_EXECUTOR_WORKER_AMOUNT: 2
      SERVER_EXECUTOR_BATCH_SIZE: 1000
      SERVER_EXECUTOR_SENDER_AMOUNT: 2

  coordinator-db:
    image: postgres:17.4-alpine
    ports:
      - "5432:5432"
    networks:
      - net
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: coordinator
    volumes:
      - coordinator-db-data:/var/lib/postgresql/data

  minio:
    image: minio/minio:RELEASE.2025-05-24T17-08-30Z
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - net
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: minioroot
      MINIO_ROOT_PASSWORD: minioroot
    command: [ "server", "--console-address", ":9001", "/data" ]

  create-buckets:
    image: minio/mc:RELEASE.2025-05-21T01-59-54Z
    networks:
      - net
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set dockerminio http://minio:9000 minioroot minioroot;
      /usr/bin/mc mb dockerminio/loki;
      /usr/bin/mc mb dockerminio/mimir-blocks;
      exit 0;
      "

  mimir:
    image: grafana/mimir:2.15.3
    networks:
      - net
    volumes:
      - ./mimir.yaml:/etc/mimir/mimir.yaml
      - mimir-data:/data
    command:
      - -config.file=/etc/mimir/mimir.yaml

  alloy:
    image: grafana/alloy:v1.9.1
    ports:
      - "12345:12345"
    networks:
      - net
    volumes:
      - ./config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
    command: [ "run", "--server.http.listen-addr=0.0.0.0:12345", "--storage.path=/var/lib/alloy/data", "/etc/alloy/config.alloy" ]

  loki:
    image: grafana/loki:3.5.1
    ports:
      - "3100:3100"
    networks:
      - net
    user: root
    volumes:
      - ./loki.yaml:/etc/loki/loki.yaml
      - loki-wal-data:/loki/wal
    command: [ "-config.file=/etc/loki/loki.yaml" ]

  prometheus:
    image: prom/prometheus:v3.4.1
    ports:
      - "9090:9090"
    networks:
      - net
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus-data:/prometheus
    command: [ "--web.enable-remote-write-receiver", "--config.file=/etc/prometheus/prometheus.yaml" ]

  grafana:
    image: grafana/grafana:12.0.1
    ports:
      - "3000:3000"
    networks:
      - net
    environment:
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
        - name: Prometheus
          type: prometheus
          orgId: 1
          url: http://mimir:9009/prometheus
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh

volumes:
  coordinator-db-data:
  minio-data:
  loki-wal-data:
  prometheus-data:
  mimir-data:

networks:
  net: